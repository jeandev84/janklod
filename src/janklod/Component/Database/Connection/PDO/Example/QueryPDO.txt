<?php
namespace Jan\Component\Database\Connection\PDO;


use Closure;
use Exception;
use Jan\Component\Database\Connection\AbstractQuery;
use Jan\Component\Database\Contract\EntityMap;
use Jan\Component\Database\Contract\QueryInterface;
use Jan\Component\Database\Exception\StatementException;
use PDO;
use PDOException;
use PDOStatement;



/**
 * Class Query
 *
 * @package Jan\Component\Database\Connection\PDO
*/
class Query extends AbstractQuery implements EntityMap
{

     /**
      * @var PDO
     */
     protected $pdo;


     /**
      * @var PDOStatement
     */
     protected $statement;



     /**
      * @var int
     */
     protected $fetchMode = PDO::FETCH_OBJ;



     /**
      * @var string
     */
     protected $entityClass;


     /**
      * @var mixed
     */
     protected $result;



     /**
      * @var array
     */
     protected $results = [];



     /**
      * @var array
     */
     protected $bindValues = [];




    /**
     * @var array
    */
    protected $records = [];



     /**
      * Statement constructor.
      * @param PDO $pdo
     */
     public function __construct(PDO $pdo)
     {
          $this->pdo = $pdo;
     }


     /**
      * @param $sql
      * @return $this
     */
     public function setSQL($sql): QueryInterface
     {
         $this->sql = $sql;

         try {

             $this->statement = $this->pdo->prepare($sql);

         } catch (PDOException $e) {

             throw $e;
         }

         return parent::setSQL($sql);
     }


      /**
       * @return string
       * @throws Exception
      */
      public function getSQL(): string
      {
          return $this->sql;
      }



     /**
      * @param $params
      * @return $this
     */
     public function setParams($params): QueryInterface
     {
         $this->params = $params;

         return $this;
     }


     /**
      * @return array
     */
     public function getParams(): array
     {
         return $this->params;
     }


     /**
      * @param $fetchMode
      * @return $this
     */
     public function setFetchMode($fetchMode): QueryInterface
     {
        $this->fetchMode = $fetchMode;

        return $this;
     }


    /**
     * @param $entityClass
     * @return $this
    */
    public function setEntityClass($entityClass): QueryInterface
    {
        $this->entityClass = $entityClass;

        return $this;
    }


    /**
     * @return string
    */
    public function getEntityClass(): string
    {
        return $this->entityClass;
    }


     /**
      * @param string $param
      * @param $value
      * @param int $type
      * @return $this
     */
     public function bindValue(string $param, $value, int $type = 0): Query
     {
        $this->bindValues[] = [$param, $value, $type];

        // $this->statement->bindValue($param, $value, $type);

        // $this->params[$param] = $value;

        return $this;
     }


     /**
      * @return QueryInterface
     */
     public function execute(): QueryInterface
     {
         try {

             return $this->process();

         } catch (PDOException $e) {

             throw $e;
         }

     }


     /**
       * @return $this
     */
     protected function process(): Query
     {
         if($this->bindValues)
         {
             $params = [];

             foreach ($this->bindValues as $bindValues)
             {
                 list($param, $value, $type) = $bindValues;
                 $this->statement->bindValue($param, $value, $type);
                 $params[$param] = $value;
             }

             if($this->statement->execute())
             {
                 $this->records[$this->sql] = $params;
             }

             return $this;
         }


         if($this->statement->execute($this->params))
         {
             $this->records[$this->sql] = $this->params;
         }

         return $this;
     }


     /**
      * @return bool
     */
     public function exec(): bool
     {
          if($this->pdo->exec($this->sql))
          {
               $this->records[$this->sql] = [];

               return true;
          }

          return false;
     }


     /**
      * @param $sql
      * @param array $params
     */
     public function setQueryLog($sql, $params = [])
     {
          $this->records[$sql] = $params;
     }


     /**
      * @return array
     */
     public function getQueryLog(): array
     {
         return $this->records;
     }



    /**
     * @return array
     * @throws Exception
    */
    public function getResult(): array
    {
        if($this->entityClass)
        {
            return $this->statement()->fetchAll(PDO::FETCH_CLASS, $this->entityClass);
        }

        return $this->statement()->fetchAll($this->fetchMode);
    }


    /**
     * @return mixed
     * @throws Exception
    */
    public function getFirstRecord()
    {
        return $this->getResult()[0] ?? null;
    }


    /**
     * @return mixed
     * @throws StatementException
    */
    public function getOneRecord()
    {
        if($this->entityClass)
        {
            $this->statement()->setFetchMode(PDO::FETCH_CLASS, $this->entityClass);
            return $this->statement()->fetch();
        }

        return $this->statement->fetch($this->fetchMode);
    }



    /**
     * @return mixed|void
    */
    public function beginTransaction()
    {
        $this->pdo->beginTransaction();
    }


    /**
     * @return mixed|void
    */
    public function rollback()
    {
        $this->pdo->rollback();
    }


    /**
     * @return mixed|void
    */
    public function commit()
    {
        $this->pdo->commit();
    }


    /**
     * @param $message
    */
    protected function abortIf($message)
    {
         //
    }


    /**
     * @return PDOStatement
     * @throws StatementException
    */
    protected function statement()
    {
        if(! $this->statement)
        {
            throw new StatementException('no statement executed.');
        }

        return $this->statement;
    }

}